{"entries":[{"timestamp":1732689353286,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"6D`b3lk/Sg::vnDTg_$5\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\":?(rE]|(`^v.3fQ?wt88\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace TelloControl {\" line1=\"    // Initialize the variables\" line2=\"    let telloIP = &quot;192.168.10.1&quot;;\" line3=\"    let commandPort = 8889;\" line4=\"\" line5=\"    // Function to read and display response on the micro:bit\" line6=\"    function readResponse(): void {\" line7=\"        let response = serial.readString();\" line8=\"        if (response.includes(&quot;OK&quot;)) {\" line9=\"            basic.showString(&quot;Connected&quot;);\" line10=\"        } else {\" line11=\"            basic.showString(&quot;Failed&quot;);\" line12=\"            basic.showString(response); // Display the actual error\" line13=\"        }\" line14=\"    }\" line15=\"\" line16=\"    function sendCommandToTello(command: string): void {\" line17=\"        // Assuming you're already connected to Tello WiFi, have set up UDP connection and initialisd the Tello into SDK mode\" line18=\"        sendAT(`AT+CIPSEND=${command.length}`, 500);  // Send command length and command\" line19=\"        serial.writeString(command + &quot;\\r\\n&quot;); // Send the actual command\" line20=\"        basic.pause(500);\" line21=\"        readResponse(); // Display Tello's response\" line22=\"    }\" line23=\"\" line24=\"    function sendAT(command: string, wait: number = 0) {\" line25=\"        serial.writeString(`${command}\\u000D\\u000A`);\" line26=\"        basic.pause(wait);\" line27=\"    }\" line28=\"\" line29=\"    // Function to initialize ESP8266 and redirect serial communication\" line30=\"    //% block=&quot;initialize ESP8266 with TX %tx| RX %rx&quot;\" line31=\"    //% tx.defl=SerialPin.P8\" line32=\"    //% rx.defl=SerialPin.P12\" line33=\"    export function initESP8266(tx: SerialPin, rx: SerialPin): void {\" line34=\"        serial.redirect(tx, rx, BaudRate.BaudRate115200); // Redirect TX and RX\" line35=\"        basic.pause(100);\" line36=\"        serial.setTxBufferSize(128);\" line37=\"        serial.setRxBufferSize(128);\" line38=\"\" line39=\"        sendAT(&quot;AT+RST&quot;, 2000); // Reset the ESP8266\" line40=\"        sendAT(&quot;AT+CWMODE=1&quot;, 500); // Set ESP8266 to Station Mode (STA mode)\" line41=\"        sendAT(&quot;AT+CWQAP&quot;, 1000); // Disconnect from current Wi-Fi\" line42=\"        sendAT(&quot;AT&quot;, 500); // Check if ESP8266 responds with &quot;OK&quot;\" line43=\"    }\" line44=\"\" line45=\"    //% block=&quot;Flip&quot;\" line46=\"    export function flip(): void {\" line47=\"        sendCommandToTello(&quot;flip b&quot;);\" line48=\"    }\" line49=\"    //% block=&quot;Emergency Stop&quot;\" line50=\"    export function emergency(): void {\" line51=\"        sendCommandToTello(&quot;emergency&quot;);\" line52=\"    }\" line53=\"    //% block=&quot;Move Right&quot;\" line54=\"    export function right(): void {\" line55=\"        sendCommandToTello(&quot;right&quot;);\" line56=\"    }\" line57=\"\" line58=\"    //% block=&quot;Move Left&quot;\" line59=\"    export function left(): void {\" line60=\"        sendCommandToTello(&quot;left&quot;);\" line61=\"    }\" line62=\"\" line63=\"    //% block=&quot;Move Back&quot;\" line64=\"    export function back(): void {\" line65=\"        sendCommandToTello(&quot;back&quot;);\" line66=\"    }\" line67=\"    //% block=&quot;Move Forward&quot;\" line68=\"    export function forward(): void {\" line69=\"        sendCommandToTello(&quot;forward&quot;);\" line70=\"    }\" line71=\"\" line72=\"    //% block=&quot;Land&quot;\" line73=\"    export function land(): void {\" line74=\"        sendCommandToTello(&quot;land&quot;);\" line75=\"    }\" line76=\"\" line77=\"    //% block=&quot;Takeoff&quot;\" line78=\"    export function takeOff(): void {\" line79=\"        sendCommandToTello(&quot;takeoff&quot;);\" line80=\"    }\" line81=\"    // Seting up UDP connection (2) and initialise the Tello into SDK mode (3)\" line82=\"    //% block=&quot;Initialise ESP and Tello connection&quot;\" line83=\"    export function setupUDPConnection(): void {\" line84=\"        sendAT(`AT+CIPSTART=&quot;UDP&quot;,&quot;${telloIP}&quot;,${commandPort}`, 500);\" line85=\"        basic.pause(500); // Allow some time for connection setup\" line86=\"        sendCommandToTello(&quot;command&quot;);\" line87=\"        basic.pause(500); // Allow some time for connection setup\" line88=\"    }\" line89=\"\" line90=\"    // Function to connect to Tello Wi-Fi (1)\" line91=\"    //% block=&quot;Connect to Tello Wi-Fi SSID %ssid&quot;\" line92=\"    export function connectToWiFi(ssid: string): void {\" line93=\"        sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;&quot;`, 5000); // No password is required\" line94=\"        readResponse(); // Display response on micro:bit\" line95=\"    }\" line96=\"}\" numlines=\"97\"></mutation></block></statement></block>"],[1,"://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":4866,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=#126180 icon=\"\\uf0fb\" block=\"ThisExtensionIsATest\"\nnamespace TelloControl {\n    // Initialize the variables\n    let telloIP = \"192.168.10.1\";\n    let commandPort = 8889;\n\n    // Function to read and display response on the micro:bit\n    function readResponse(): void {\n        let response = serial.readString();\n        if (response.includes(\"OK\")) {\n            basic.showString(\"Connected\");\n        } else {\n            basic.showString(\"Failed\");\n            basic.showString(response); // Display the actual error\n        }\n    }\n\n    function sendCommandToTello(command: string): void {\n        // Assuming you're already connected to Tello WiFi, have set up UDP connection and initialisd the Tello into SDK mode\n        sendAT(`AT+CIPSEND=${command.length}`, 500);  // Send command length and command\n        serial.writeString(command + \"\\r\\n\"); // Send the actual command\n        basic.pause(500);\n        readResponse(); // Display Tello's response\n    }\n\n    function sendAT(command: string, wait: number = 0) {\n        serial.writeString(`${command}\\u000D\\u000A`);\n        basic.pause(wait);\n    }\n\n    // Function to initialize ESP8266 and redirect serial communication\n    //% block=\"initialize ESP8266 with TX %tx| RX %rx\"\n    //% tx.defl=SerialPin.P8\n    //% rx.defl=SerialPin.P12\n    export function initESP8266(tx: SerialPin, rx: SerialPin): void {\n        serial.redirect(tx, rx, BaudRate.BaudRate115200); // Redirect TX and RX\n        basic.pause(100);\n        serial.setTxBufferSize(128);\n        serial.setRxBufferSize(128);\n\n        sendAT(\"AT+RST\", 2000); // Reset the ESP8266\n        sendAT(\"AT+CWMODE=1\", 500); // Set ESP8266 to Station Mode (STA mode)\n        sendAT(\"AT+CWQAP\", 1000); // Disconnect from current Wi-Fi\n        sendAT(\"AT\", 500); // Check if ESP8266 responds with \"OK\"\n    }\n\n    //% block=\"Flip\"\n    export function flip(): void {\n        sendCommandToTello(\"flip b\");\n    }\n    //% block=\"Emergency Stop\"\n    export function emergency(): void {\n        sendCommandToTello(\"emergency\");\n    }\n    //% block=\"Move Right\"\n    export function right(): void {\n        sendCommandToTello(\"right\");\n    }\n\n    //% block=\"Move Left\"\n    export function left(): void {\n        sendCommandToTello(\"left\");\n    }\n\n    //% block=\"Move Back\"\n    export function back(): void {\n        sendCommandToTello(\"back\");\n    }\n    //% block=\"Move Forward\"\n    export function forward(): void {\n        sendCommandToTello(\"forward\");\n    }\n\n    //% block=\"Land\"\n    export function land(): void {\n        sendCommandToTello(\"land\");\n    }\n\n    //% block=\"Takeoff\"\n    export function takeOff(): void {\n        sendCommandToTello(\"takeoff\");\n    }\n    // Seting up UDP connection (2) and initialise the Tello into SDK mode (3)\n    //% block=\"Initialise ESP and Tello connection\"\n    export function setupUDPConnection(): void {\n        sendAT(`AT+CIPSTART=\"UDP\",\"${telloIP}\",${commandPort}`, 500);\n        basic.pause(500); // Allow some time for connection setup\n        sendCommandToTello(\"command\");\n        basic.pause(500); // Allow some time for connection setup\n    }\n\n    // Function to connect to Tello Wi-Fi (1)\n    //% block=\"Connect to Tello Wi-Fi SSID %ssid\"\n    export function connectToWiFi(ssid: string): void {\n        sendAT(`AT+CWJAP=\"${ssid}\",\"\"`, 5000); // No password is required\n        readResponse(); // Display response on micro:bit\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":3400,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":244,"start2":244,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1732689353285,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"ThisExtensionIsATest\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1732689496892}